{
  "openapi": "3.0.0",
  "info": {
    "title": "Order Processing Mock API",
    "description": "API documentation for the Order Processing Mock API",
    "version": "1.0.0",
    "contact": {
      "name": "Kavia"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Orders",
      "description": "Order management endpoints"
    },
    {
      "name": "Checkout",
      "description": "Checkout process endpoints"
    },
    {
      "name": "Payments",
      "description": "Payment processing endpoints"
    }
  ],
  "paths": {
    "/api/status": {
      "get": {
        "summary": "API Status",
        "description": "Check if the API is running",
        "tags": ["Status"],
        "responses": {
          "200": {
            "description": "API is running",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Order Processing Mock API is running!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/orders": {
      "get": {
        "summary": "Get all orders",
        "description": "Retrieve a list of all orders",
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "List of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new order",
        "description": "Create a new order with the provided data",
        "tags": ["Orders"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "examples": {
                  "invalidData": {
                    "summary": "Invalid input data",
                    "value": {
                      "error": {
                        "code": "VALIDATION_ERROR",
                        "message": "Invalid input data provided",
                        "details": [
                          {
                            "field": "items",
                            "message": "At least one item is required"
                          },
                          {
                            "field": "customerId",
                            "message": "Customer ID is required"
                          }
                        ],
                        "status": 400,
                        "timestamp": "2023-01-01T12:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/orders/{id}": {
      "get": {
        "summary": "Get order by ID",
        "description": "Retrieve an order by its ID",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an order",
        "description": "Delete an order by its ID",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Order deleted successfully"
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/orders/{id}/status": {
      "put": {
        "summary": "Update order status",
        "description": "Update the status of an order",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["CREATED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED"]
            },
            "description": "New order status"
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/checkout/initialize": {
      "post": {
        "summary": "Initialize checkout",
        "description": "Initialize a new checkout session",
        "tags": ["Checkout"],
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout initialized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/checkout/process": {
      "post": {
        "summary": "Process checkout",
        "description": "Process a checkout session and create an order",
        "tags": ["Checkout"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Checkout"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/checkout/shipping-cost": {
      "post": {
        "summary": "Calculate shipping cost",
        "description": "Calculate shipping cost for a checkout session",
        "tags": ["Checkout"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Checkout"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shipping cost calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "float",
                  "example": 12.5
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/checkout/tax": {
      "post": {
        "summary": "Calculate tax",
        "description": "Calculate tax for a checkout session",
        "tags": ["Checkout"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Checkout"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tax calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "float",
                  "example": 8.0
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/process": {
      "post": {
        "summary": "Process payment",
        "description": "Process a payment for an order",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          },
          {
            "name": "paymentMethod",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["CREDIT_CARD", "PAYPAL", "BANK_TRANSFER"]
            },
            "description": "Payment method"
          },
          {
            "name": "amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Payment amount"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/{id}": {
      "get": {
        "summary": "Get payment by ID",
        "description": "Retrieve a payment by its ID",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Payment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/order/{orderId}": {
      "get": {
        "summary": "Get payment by order ID",
        "description": "Retrieve a payment by its associated order ID",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/{id}/refund": {
      "post": {
        "summary": "Refund payment",
        "description": "Refund a payment by its ID",
        "tags": ["Payments"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Payment ID"
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Refund amount (optional, defaults to full payment amount)"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment refunded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": null,
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NY"
          },
          "zipCode": {
            "type": "string",
            "example": "10001"
          },
          "country": {
            "type": "string",
            "example": "USA"
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "example": "Laptop"
          },
          "category": {
            "type": "string",
            "example": "Electronics"
          },
          "unitPrice": {
            "type": "number",
            "format": "float",
            "example": 999.99
          },
          "quantity": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "OrderInput": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "customerName": {
            "type": "string",
            "example": "John Smith"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "subtotal": {
            "type": "number",
            "format": "float",
            "example": 999.99
          },
          "tax": {
            "type": "number",
            "format": "float",
            "example": 80.0
          },
          "shippingCost": {
            "type": "number",
            "format": "float",
            "example": 10.5
          },
          "totalAmount": {
            "type": "number",
            "format": "float",
            "example": 1090.49
          }
        },
        "required": ["customerId", "items"]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "orderNumber": {
            "type": "string",
            "example": "ORD-1234567890"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T12:00:00Z"
          },
          "status": {
            "type": "string",
            "enum": ["CREATED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED"],
            "example": "CREATED"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "customerName": {
            "type": "string",
            "example": "John Smith"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "subtotal": {
            "type": "number",
            "format": "float",
            "example": 999.99
          },
          "tax": {
            "type": "number",
            "format": "float",
            "example": 80.0
          },
          "shippingCost": {
            "type": "number",
            "format": "float",
            "example": 10.5
          },
          "totalAmount": {
            "type": "number",
            "format": "float",
            "example": 1090.49
          }
        }
      },
      "Checkout": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "customerId": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentMethod": {
            "type": "string",
            "enum": ["CREDIT_CARD", "PAYPAL", "BANK_TRANSFER"],
            "example": "CREDIT_CARD"
          },
          "subtotal": {
            "type": "number",
            "format": "float",
            "example": 999.99
          },
          "tax": {
            "type": "number",
            "format": "float",
            "example": 80.0
          },
          "shippingCost": {
            "type": "number",
            "format": "float",
            "example": 10.5
          },
          "total": {
            "type": "number",
            "format": "float",
            "example": 1090.49
          }
        },
        "required": ["customerId"]
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "orderId": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "transactionId": {
            "type": "string",
            "example": "TXN-1234567890"
          },
          "paymentMethod": {
            "type": "string",
            "enum": ["CREDIT_CARD", "PAYPAL", "BANK_TRANSFER"],
            "example": "CREDIT_CARD"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "example": 1090.49
          },
          "status": {
            "type": "string",
            "enum": ["COMPLETED", "PENDING", "FAILED", "REFUNDED"],
            "example": "COMPLETED"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T12:00:00Z"
          },
          "refundAmount": {
            "type": "number",
            "format": "float",
            "example": 1090.49
          },
          "refundDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-02T12:00:00Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "INVALID_INPUT",
                "description": "Error code for the specific error type"
              },
              "message": {
                "type": "string",
                "example": "Invalid input data provided"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "example": "email"
                    },
                    "message": {
                      "type": "string",
                      "example": "Must be a valid email address"
                    }
                  }
                }
              },
              "status": {
                "type": "integer",
                "example": 400
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "example": "2023-01-01T12:00:00Z"
              }
            }
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "VALIDATION_ERROR"
              },
              "message": {
                "type": "string",
                "example": "Validation failed"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "type": "string",
                      "example": "items"
                    },
                    "message": {
                      "type": "string",
                      "example": "At least one item is required"
                    }
                  }
                }
              },
              "status": {
                "type": "integer",
                "example": 400
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "example": "2023-01-01T12:00:00Z"
              }
            }
          }
        }
      },
    }
  }
}
