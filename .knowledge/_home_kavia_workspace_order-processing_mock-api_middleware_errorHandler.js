{"is_source_file": true, "format": "JavaScript", "description": "This file contains middleware for handling errors in an Express API. It defines a custom error class and a global error handler function.", "external_files": ["./validation", "./auth"], "external_methods": [], "published": ["errorHandler", "APIError"], "classes": [{"name": "APIError", "description": "Custom error class for API errors, extending the standard Error class with an additional status code property."}], "methods": [{"name": "errorHandler", "description": "Middleware function to handle errors thrown in the Express app, formatting the response based on the error type."}, {"name": "constructor(message, statusCode = 500)", "scope": "APIError", "scopeKind": "class", "description": "unavailable"}], "calls": ["res.status", "res.json"], "search-terms": ["error handling", "APIError", "errorHandler"], "state": 2, "file_id": 44, "knowledge_revision": 117, "git_revision": "70f23bcd3f2a1a4a2871cd672a5343daafc3826e", "revision_history": [{"95": ""}, {"117": "70f23bcd3f2a1a4a2871cd672a5343daafc3826e"}], "ctags": [{"_type": "tag", "name": "APIError", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^class APIError extends Error {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^  constructor(message, statusCode = 500) {$/", "language": "JavaScript", "kind": "method", "signature": "(message, statusCode = 500)", "scope": "APIError", "scopeKind": "class"}, {"_type": "tag", "name": "error", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^    error: {$/", "language": "JavaScript", "kind": "class", "scope": "response", "scopeKind": "class"}, {"_type": "tag", "name": "errorHandler", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^  errorHandler,$/", "language": "JavaScript", "kind": "field", "scope": "module.exports", "scopeKind": "class"}, {"_type": "tag", "name": "errorHandler", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^const errorHandler = (err, req, res, next) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^      message: err.message || 'Internal Server Error',$/", "language": "JavaScript", "kind": "property", "scope": "response.error", "scopeKind": "class"}, {"_type": "tag", "name": "response", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^  let response = {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^      status: err.statusCode || 500,$/", "language": "JavaScript", "kind": "property", "scope": "response.error", "scopeKind": "class"}, {"_type": "tag", "name": "timestamp", "path": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "pattern": "/^      timestamp: new Date().toISOString()$/", "language": "JavaScript", "kind": "property", "scope": "response.error", "scopeKind": "class"}], "filename": "/home/kavia/workspace/order-processing/mock-api/middleware/errorHandler.js", "hash": "c36f3478a077386a42b56e47dd6b05ca", "format-version": 4, "code-base-name": "default", "fields": [{"name": "errorHandler,", "scope": "module.exports", "scopeKind": "class", "description": "unavailable"}, {"name": "message: err.message || 'Internal Server Error',", "scope": "response.error", "scopeKind": "class", "description": "unavailable"}, {"name": "status: err.statusCode || 500,", "scope": "response.error", "scopeKind": "class", "description": "unavailable"}, {"name": "timestamp: new Date().toISOString()", "scope": "response.error", "scopeKind": "class", "description": "unavailable"}]}